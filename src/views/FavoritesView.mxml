<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="Faves"
		xmlns:mixes="services.mixes.*"
		creationComplete="faves_creationCompleteHandler(event)"
		currentState="NoFaves"
		backgroundColor="black">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="HasFaves">
			
		</s:State>
		<s:State name="NoFaves">
			
		</s:State>
	</s:states>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		.myFontStyle { 
			fontSize: 28;
			color: #E2E2E2;
			fontFamily: "Roboto-Condensed";
			paddingTop:10;
		}
		
		.listFontStyle { 
			fontSize: 50;
			color: #FFFFFF;
			fontFamily: "BebasNeue";
			paddingTop:10;
		}
		
		
		
		/* StyleableTextField, regular */
		@font-face {
			src: url("assets/fonts/Roboto-Condensed-webfont.ttf");
			fontFamily: "Roboto-Condensed";
			embedAsCFF: false;
		}
		
		/* StyleableTextField, regular */
		@font-face {
			src: url("assets/fonts/Roboto-BoldCondensed-webfont.ttf");
			fontFamily: "Roboto-Condensed";
			embedAsCFF: false;
			fontWeight: bold;
		}
		
		
		
		/* Label, regular */
		@font-face {
			src: url("assets/fonts/Roboto-Condensed-webfont.ttf");
			fontFamily: "Roboto-CondensedCFF";
			embedAsCFF: true;
		}
		
		/* Label, bold */
		@font-face {
			src: url("assets/fonts/Roboto-BoldCondensed-webfont.ttf");
			fontFamily: "Roboto-CondensedCFF";
			fontWeight: bold;
			embedAsCFF: true;
		}
		
		/* StyleableTextField, regular */
		@font-face {
			src: url("assets/BebasNeue.otf");
			fontFamily: "BebasNeue";
			embedAsCFF: false;
		}
		
		
		
		/* Label, regular */
		@font-face {
			src: url("assets/BebasNeue.otf");
			fontFamily: "BebasNeueCFF";
			embedAsCFF: true;
		}
		
		/* Label, bold */
		@font-face {
			src: url("assets/BebasNeue.otf");
			fontFamily: "BebasNeueCFF";
			fontWeight: bold;
			embedAsCFF: true;
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			
			import events.Close;
			import events.NowPlaying;
			import events.CheckNetworkConnection;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.components.ContentBackgroundAppearance;
			import spark.events.IndexChangeEvent;
			protected var sqlConnection:SQLConnection = new SQLConnection();
			
			protected var faveData:ArrayCollection = new ArrayCollection();
			
			protected function closeButton_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Close(Close.CLOSE_APP,true));
			}
			
			protected function nowPlayingButton_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new NowPlaying(NowPlaying.NOW_PLAYING,true));
			}
			
			protected function faves_creationCompleteHandler(event:FlexEvent):void
			{
				
				this.dispatchEvent(new CheckNetworkConnection(CheckNetworkConnection.CHECK_NETWORK_STATUS,true));
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("faves.db"));
				var sqls:SQLStatement = new SQLStatement();
				sqls.sqlConnection = sqlConnection;
				sqls.text = "SELECT mixid FROM faves";
				sqls.execute();
				var data:SQLResult = sqls.getResult();
				// we pass the array of objects to our data provider to fill the datagrid
				
				
				var mixIdList:String = '';
				
				if(data.data !== null)
				{
					this.currentState = 'HasFaves';
					for ( var x:int = 0; x < data.data.length; ++x )
					{
						if (x == 0)
						{
							mixIdList = data.data[x].mixID;
						}
						else
						{
							mixIdList = mixIdList + ','+ data.data[x].mixID ;
						}
					}
					getMixesResult.token = mixes2.getFavesPage(mixIdList,'');
				}
				else
				{
					this.currentState = 'NoFaves';
				}
				if (Capabilities.version.indexOf("IOS") == 0)
				{
					closeButton.visible = false;
					closeButton.height = 0;
				}
				
			}
			
			protected function faves_changeHandler(event:IndexChangeEvent):void
			{
				navigator.pushView(views.PlayerView, faves.selectedItem);
				
			}
			
			protected function aboutButton_clickHandler(event:MouseEvent):void
			{
				navigator.pushView(views.AboutView);
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:CallResponder id="getMixesResult"/>
		<mixes:Mixes id="mixes2"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:actionContent>
		<s:CalloutButton x="5" width="67" fontSize="22" fontWeight="normal"
						 icon="assets/sliders30.png" styleName="calloutButtonStyle">
			
			<s:calloutLayout>
				<s:VerticalLayout paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" horizontalAlign="center" gap="5"/>
			</s:calloutLayout>
			<s:calloutContent  >
				<s:Button id="aboutButton"  label="IndieDJ.FM" fontSize="40" width="250" height="60" fontWeight="normal"
						  click="aboutButton_clickHandler(event)" icon="assets/59-info.png"/>
				<s:Button id="nowPlayingButton"  label="Now Playing" fontSize="40" width="250" height="60" fontWeight="normal"
						  click="nowPlayingButton_clickHandler(event)" icon="assets/36-circle-play.png"/>
				<s:Button id="closeButton"  label="Exit" width="{nowPlayingButton.width}" fontSize="40" height="60" fontWeight="normal"
						  click="closeButton_clickHandler(event)" icon="assets/57-power.png"/>
			</s:calloutContent>	
		</s:CalloutButton>
	</s:actionContent>
	
	
	<s:List includeIn="HasFaves" id="faves" width="100%" height="100%" alternatingItemColors="black"
			change="faves_changeHandler(event)" color="#FFFFFF" contentBackgroundColor="black"
			creationComplete="faves_creationCompleteHandler(event)"
			itemRenderer="views.MixesViewListItemRenderer">
		<s:AsyncListView list="{getMixesResult.lastResult}"/>
	</s:List>
	
	<s:Scroller includeIn="NoFaves" x="0" y="0" width="100%" height="100%">
		<s:VGroup width="100%" height="100%" horizontalAlign="center">
			<s:Spacer width="10" height="10"/>
			<s:BorderContainer width="95%" height="219" borderStyle="inset" borderWeight="4"
							   cornerRadius="10" dropShadowVisible="false" textAlign="left">
				<s:backgroundFill>
					<!-- 0 rotation creates left to right gradient -->
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="0x434343"/>
						<s:GradientEntry color="0x434343"/>
						<s:GradientEntry color="0x434343"/>
						<s:GradientEntry color="0x343434"/>
						<s:GradientEntry color="0x343434"/>
						
					</s:LinearGradient>
				</s:backgroundFill>	
				<s:Image id="djImage" x="21" y="21" width="171" height="170" scaleMode="stretch" smooth="true"
						 smoothingQuality="high" source="assets/placeHolderMix.png"  />
				<s:Label x="211" y="21" width="50%" height="100%" color="#FFFFFF"
						 text="No faves have been added yet, when you are on a mix page use the options button to fave a mix.&#xd;"/>
				
				
				
				
			</s:BorderContainer>
			
			
			
		</s:VGroup>
	</s:Scroller>
	
	
</s:View>
